import { Command } from "../types";
import {
        SlashCommandBuilder,
        CommandInteractionOptionResolver,
        GuildMember,
        EmbedBuilder,
        StringSelectMenuBuilder,
        ActionRowBuilder,
        StringSelectMenuOptionBuilder,
        ButtonBuilder,
        ButtonStyle
} from "discord.js";
import { MusicTime } from "../utils/MusicTimeUtils";
import { 
        PinkColor, 
        JoinVoiceChannel, 
        SearchError 
} from "../utils/embedEvents";

const data = new SlashCommandBuilder()
        .setName('play').setDescription('‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
        .addStringOption(o => o.setName('song').setDescription('‡∏õ‡πâ‡∏≠‡∏ô URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á').setRequired(true))

module.exports = {
        data: data,
        async execute(client, interaction) {
                try {
                        if (!interaction.guildId) return;

                        await interaction.deferReply();

                        const voiceId = (interaction.member as GuildMember).voice.channelId
                        if (!voiceId) return interaction.editReply({ embeds: [JoinVoiceChannel] })

                        const player = client.lavalink.createPlayer({
                                guildId: interaction.guildId,
                                voiceChannelId: voiceId,
                                textChannelId: interaction.channelId,
                                selfDeaf: true,
                                selfMute: false,
                                volume: 100
                        });

                        await player.connect();

                        const song = ((interaction.options as CommandInteractionOptionResolver).getString('song') as string);

                        const search = await player.search({
                                query: song
                        }, interaction.user);


                        await player.queue.add(search.tracks[0]);

                        if (!player.playing) player.play();

                        const embedMusicPlay = new EmbedBuilder()
                                .setAuthor({ name: interaction.user.displayName, iconURL: interaction.user.displayAvatarURL() ?? '' })
                                .setTitle(player.queue.tracks[0] ? `**‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${player.queue.tracks.length} ‡∏Ñ‡∏¥‡∏ß**` : null)
                                .setDescription(
                                        search.loadType === 'playlist' ?
                                                `‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏•‡∏á: ${search.playlist?.title}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡∏£‡πá‡∏Å: ${search.tracks.length}` :
                                                search.loadType === 'track' ?
                                                        `‡πÄ‡∏û‡∏•‡∏á: [${search.tracks[0].info.title}](<${search.tracks[0].info.uri}>)\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏•‡∏á: ${player.queue.tracks.length}` :
                                                        search.loadType === 'search' ?
                                                                `‡πÄ‡∏û‡∏•‡∏á: [${search.tracks[0].info.title}](<${search.tracks[0].info.uri}>)\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏•‡∏á: ${player.queue.tracks.length}` :
                                                                search.loadType === 'error' ?
                                                                        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞' :
                                                                        '‡πÅ‡∏¢‡πà‡∏à‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡πÄ‡∏•‡∏¢..'
                                )
                                .setColor(PinkColor)
                                .addFields(
                                        {
                                                name: '\`üé∂\` **‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**',
                                                value: `**${player.queue.tracks.length}**`,
                                                inline: false
                                        },
                                        {
                                                name: '\`üé∂\` **‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á**',
                                                value: `**${search.tracks[0].info.author}**`,
                                                inline: true
                                        },
                                        {
                                                name: '\`üé∂\` **‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤**',
                                                value: `**${MusicTime(search.tracks[0].info.duration as number)}**`,
                                                inline: true
                                        },
                                        {
                                                name: '\`üé∂\` **‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏ô‡πÇ‡∏´‡∏ô‡∏î**',
                                                value: `**${player.node.id}**`,
                                                inline: true
                                        }
                                )
                                .setFooter({ text: client.user?.displayName as string, iconURL: client.user?.displayAvatarURL() ?? '' })
                                .setTimestamp();

                        if (search.loadType === 'playlist' || search.loadType === 'track' || search.loadType === 'search') {
                                const Filters = new StringSelectMenuBuilder()
                                        .setCustomId('filters')
                                        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏•‡∏á')
                                        .addOptions(
                                                new StringSelectMenuOptionBuilder()
                                                        .setLabel('Clear Filters (‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)')
                                                        .setDescription('‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏Å‡πá‡∏ï‡∏≤‡∏°')
                                                        .setValue('clear'),
                                                new StringSelectMenuOptionBuilder()
                                                        .setLabel('üé∂ Nightcore')
                                                        .setDescription('‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏´‡∏•‡∏°‡∏Ç‡∏∂‡πâ‡∏ô')
                                                        .setValue('nightcore'),
                                                new StringSelectMenuOptionBuilder()
                                                        .setLabel('üé∂ Karaoke')
                                                        .setDescription('‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏î‡∏ô‡∏ï‡∏£‡∏µ')
                                                        .setValue('karaoke')
                                        );
                                const SelectFilters = new ActionRowBuilder<StringSelectMenuBuilder>()
                                        .addComponents(Filters);

                                const FilterRowCheck = new ActionRowBuilder<ButtonBuilder>()
                                        .addComponents(
                                                new ButtonBuilder()
                                                        .setCustomId('filters-check')
                                                        .setLabel('üé∂ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå')
                                                        .setStyle(ButtonStyle.Secondary)
                                        )

                                await interaction.editReply({ embeds: [embedMusicPlay], components: [SelectFilters, FilterRowCheck] });

                                return;
                        }

                        if (search.loadType === 'error') return interaction.editReply({ embeds: [SearchError] })
                } catch (error) {
                        console.error(error)
                }
        }
} as Command

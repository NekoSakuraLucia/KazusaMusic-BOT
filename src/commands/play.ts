import { Command } from "src/types";
import {
        SlashCommandBuilder,
        CommandInteractionOptionResolver,
        GuildMember,
        StringSelectMenuBuilder,
        ActionRowBuilder,
        StringSelectMenuOptionBuilder,
        ButtonBuilder,
        ButtonStyle
} from "discord.js";
import {
        JoinVoiceChannel,
        SearchError
} from "@utils/embedEvents";

import { addedToQueueEmbedPlay, musicPlayEmbed, noTracksFoundEmbedPlay, RegexPlayError } from "@embeds/play";

const data = new SlashCommandBuilder()
        .setName('play').setDescription('‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
        .addStringOption(o => o.setName('song').setDescription('‡∏õ‡πâ‡∏≠‡∏ô URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á').setRequired(true))

module.exports = {
        data: data,
        async execute(client, interaction) {
                try {
                        if (!interaction.guildId) return;

                        await interaction.deferReply();

                        const voiceId = (interaction.member as GuildMember).voice.channelId
                        if (!voiceId) return interaction.editReply({ embeds: [JoinVoiceChannel] })

                        const player = client.lavalink.createPlayer({
                                guildId: interaction.guildId,
                                voiceChannelId: voiceId,
                                textChannelId: interaction.channelId,
                                selfDeaf: true,
                                selfMute: false,
                                volume: 100
                        });

                        await player.connect();

                        const song = ((interaction.options as CommandInteractionOptionResolver).getString('song') as string);

                        const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)\/(watch\?v=|shorts\/|embed\/)[\w-]+/;
                        const soundcloudRegex = /^(https?:\/\/)?(www\.)?soundcloud\.com\/[\w-]+\/[\w-]+/;

                        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ song ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        let isUrl = false;
                        try {
                                new URL(song); // ‡∏ñ‡πâ‡∏≤ song ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î error
                                isUrl = true;
                        } catch (e) {
                                isUrl = false;
                        }

                        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å YouTube ‡∏´‡∏£‡∏∑‡∏≠ SoundCloud
                        if (isUrl) {
                                if (!youtubeRegex.test(song) && !soundcloudRegex.test(song)) {
                                        return interaction.editReply({ embeds: [RegexPlayError({ interaction, client }, song)] });
                                }
                        }

                        const search = await player.search({
                                query: song,
                                source: "scsearch"
                        }, interaction.user);

                        if (!search || !search.tracks.length) {
                                return interaction.editReply({ embeds: [noTracksFoundEmbedPlay({ interaction, client }, song)] });
                        }

                        const track = search.tracks[0]
                        await player.queue.add(track);

                        if (!player.playing) player.play();

                        if (player.queue.tracks.length > 0) {
                                await interaction.editReply({ embeds: [addedToQueueEmbedPlay({ interaction, client }, track, player.queue.tracks.length)] })
                        } else {
                                if (search.loadType === 'playlist' || search.loadType === 'track' || search.loadType === 'search') {
                                        const SelectFilters = new ActionRowBuilder<StringSelectMenuBuilder>()
                                                .addComponents(
                                                        new StringSelectMenuBuilder()
                                                                .setCustomId('filters')
                                                                .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏•‡∏á')
                                                                .addOptions(
                                                                        new StringSelectMenuOptionBuilder()
                                                                                .setLabel('Clear Filters (‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)')
                                                                                .setDescription('‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏Å‡πá‡∏ï‡∏≤‡∏°')
                                                                                .setValue('clear'),
                                                                        new StringSelectMenuOptionBuilder()
                                                                                .setLabel('üé∂ Nightcore')
                                                                                .setDescription('‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏´‡∏•‡∏°‡∏Ç‡∏∂‡πâ‡∏ô')
                                                                                .setValue('nightcore'),
                                                                        new StringSelectMenuOptionBuilder()
                                                                                .setLabel('üé∂ Karaoke')
                                                                                .setDescription('‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏î‡∏ô‡∏ï‡∏£‡∏µ')
                                                                                .setValue('karaoke')
                                                                )
                                                );

                                        const FilterRowCheck = new ActionRowBuilder<ButtonBuilder>()
                                                .addComponents(
                                                        new ButtonBuilder()
                                                                .setCustomId('filters-check')
                                                                .setLabel('üé∂ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå')
                                                                .setStyle(ButtonStyle.Secondary)
                                                )

                                        await interaction.editReply({ embeds: [musicPlayEmbed(player, search, interaction, client)], components: [SelectFilters, FilterRowCheck] });
                                }
                        }

                        if (search.loadType === 'error') return interaction.editReply({ embeds: [SearchError] })
                } catch (error) {
                        console.error(error)
                }
        }
} as Command
